# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
PROJECT_NAME = "unitzmobileadvisor"
XCODE_PROJECT = "#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds"
IPA_DIRECTORY = "#{OUTPUT_DIRECTORY}/#{PROJECT_NAME}.ipa"
TESTERS_FILE = "./fastlane/testers.txt"
BUILD_FOR_DEVELOPMENT_ONLY = false # true = Build for Development | false = Build to create a release
BUILD_ONLY = true


default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :betalocal do
    increment_build_number(xcodeproj: "unitzmobileadvisor.xcodeproj")
    get_certificates( # Create or get certificate, and install it
      output_path: "./builds" # Download certificate in the build folder (you don't need to create the folder)
    )
    get_provisioning_profile( # Create or get provisioning profile
      output_path: "./builds",  # Download provisioning profile in the build folder
      filename: "provisioning.mobileprovision" # Rename the local provisioning profile
    )
    update_project_provisioning( # Set the project provisioning profile (related in Xcode to the General > Signing Release section)
      xcodeproj: "unitzmobileadvisor.xcodeproj",
      target_filter: "unitzmobileadvisor", # Name of your project
      profile: "./builds/provisioning.mobileprovision",
      build_configuration: "Release"
    )
    update_project_team( # Set the right team on your project
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )    

    update_CodePushDeploymentKey

    build_app(
      workspace: "unitzmobileadvisor.xcworkspace",
      scheme: "unitzmobileadvisor",
      clean: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + " AppStore" # Value of this parameter is the name of the Provisioning Profile. By default, it will be "{bundleId} AppStore"
        }
      },
      build_path: "./builds",
      output_directory: "./builds"
    )
    upload_to_testflight
  end

  private_lane :build do
    configuration_name = "Release"
    export_options_method = "appstore"
    match_type = "appstore"
    code_sign_identity = "iPhone Distribution"
    MY_APP_ID = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    MY_PROFILE = "match AppStore #{MY_APP_ID}"
    MY_TEAM = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    VERSION_CODE = ENV['BUILD_NUMBER_CUR'] || (Time.now.to_i() - 1577840400) / 100

    # match Appstore unitz.app.mobile
    ios_set_version(
      version: "1.1.2",
      xcodeproj: XCODE_PROJECT # optional
    )
    ios_set_build_number(
      build_number: VERSION_CODE, # optional, if not specified, Build Number will be incremented
      xcodeproj: XCODE_PROJECT # optional
    )
    # increment_build_number(xcodeproj: XCODE_PROJECT)
    
    settings_to_override = {
      :BUNDLE_IDENTIFIER => MY_APP_ID,
      :PROVISIONING_PROFILE_SPECIFIER => MY_PROFILE,
      :DEVELOPMENT_TEAM => MY_TEAM,
    }

    create_keychain(
      name: ENV["CI_KEYCHAIN_NAME"],
      password: ENV["CI_KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    match(
      type: match_type,
      git_url: ENV["GIT_REPO_URL"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      readonly: true
    )

    update_project_team( # Set the right team on your project
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: XCODE_PROJECT,
      code_sign_identity: code_sign_identity,
      bundle_identifier: MY_APP_ID,
      profile_name: MY_PROFILE
    )

    update_appicon
    splash_screen

    update_CodePushDeploymentKey
    
    build_app(
      workspace: XCODE_WORKSPACE,
      scheme: PROJECT_NAME,
      clean: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          MY_APP_ID => MY_PROFILE
        }
      },
      build_path: "./builds",
      output_directory: "./builds/outputs"
    )

    # commit_version_bump(
    #   message: "!bump",# create a commit with a custom message
    #   xcodeproj: XCODE_PROJECT,
    #   ignore: /Fastfile/,
    # )

    # add_git_tag(
    #   grouping: "ios-beta",
    #   includes_lane: false,
    #   prefix: "v#{lane_context[SharedValues::VERSION_NUMBER]}.",
    #   postfix: "",
    # )
    
    # push_to_git_remote(
    #   tags: true,    # optional, default: true
    # )
  end


  private_lane :build_adhoc do
    configuration_name = "Release"
    match_type = "adhoc"
    code_sign_identity = "iPhone Distribution"
    MY_APP_ID = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    MY_PROFILE = "match AdHoc #{MY_APP_ID}"
    MY_TEAM = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    VERSION_CODE = ENV['BUILD_NUMBER_CUR'] || (Time.now.to_i() - 1577840400) / 100
    # match Appstore unitz.app.mobile
    ios_set_version(
      version: "1.1.2",
      xcodeproj: XCODE_PROJECT # optional
    )
    ios_set_build_number(
      build_number: VERSION_CODE, # optional, if not specified, Build Number will be incremented
      xcodeproj: XCODE_PROJECT # optional
    )
    # increment_build_number(xcodeproj: XCODE_PROJECT)
    
    # increment_version_number(
    #   bump_type: "patch",
    #   # bump_type: "minor",
    #   xcodeproj: XCODE_PROJECT,
    # )

    settings_to_override = {
      :BUNDLE_IDENTIFIER => MY_APP_ID,
      :PROVISIONING_PROFILE_SPECIFIER => MY_PROFILE,
      :DEVELOPMENT_TEAM => MY_TEAM,
    }

    create_keychain(
      name: ENV["CI_KEYCHAIN_NAME"],
      password: ENV["CI_KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    match(
      type: "appstore",
      git_url: ENV["GIT_REPO_URL"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      readonly: true
    )

    match(
      type: "development",
      git_url: ENV["GIT_REPO_URL"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      readonly: true
    )

    match(
      type: match_type,
      git_url: ENV["GIT_REPO_URL"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      readonly: true
    )

    update_appicon
    splash_screen

    update_project_team( # Set the right team on your project
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: XCODE_PROJECT,
      code_sign_identity: code_sign_identity,
      bundle_identifier: MY_APP_ID,
      profile_name: MY_PROFILE
    )

    update_CodePushDeploymentKey

    build_app(
      workspace: XCODE_WORKSPACE,
      scheme: PROJECT_NAME,
      clean: true,
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
          MY_APP_ID => MY_PROFILE
        }
      },
      build_path: "./builds",
      output_directory: "./builds/outputs"
    )

    # commit_version_bump(
    #   message: "!bump",# create a commit with a custom message
    #   xcodeproj: XCODE_PROJECT,
    #   ignore: /Fastfile/,
    # )

    # add_git_tag(
    #   grouping: "ios-stage",
    #   includes_lane: false,
    #   prefix: "v#{lane_context[SharedValues::VERSION_NUMBER]}.",
    #   postfix: "",
    # )
    
    # push_to_git_remote(
    #   tags: true,    # optional, default: true
    # )
  end

  desc "Create Signed IPA Build for AppStore"
  lane :beta do
    build
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_CONNECT_ISSUER_ID"],
      key_filepath: "./AuthKey_" + ENV["APP_CONNECT_KEY_ID"] + ".p8",
      duration: 1200, # optional (maximum 1200)
      in_house: false, # optional but may be required if using match/sigh
    )
    upload_to_testflight(
      ipa: './builds/outputs/unitzmobileadvisor.ipa',
      skip_waiting_for_build_processing: true,
      api_key: api_key
    )
  end

  desc "Upload to testfligh for testing"
  lane :release do
    upload_to_testflight
  end

  desc "Create Signed IPA Build for Firebase"
  lane :firebase do
    build_adhoc
  end

  desc "Update appicon"
  lane :update_appicon do
    appicon(
      appicon_devices: [:ipad, :iphone, :ios_marketing],
      appicon_path: "unitzmobileadvisor/Images.xcassets",
      appicon_image_file: '../../../modules/unitz-assets/Advisor/Icon.jpg'
    )
  end

  desc "Update splash"
  lane :splash_screen do
    # appicon(
    #   appicon_image_file: '../../../modules/unitz-assets/Advisor/splashscreen.png',
    #   appicon_devices: [:universal],
    #   appicon_path: "unitzmobileadvisor/Images.xcassets",
    #   appicon_name: 'SplashScreen.imageset'
    # )
    yarn(
      command: "config-splash-ios",
      package_path: "../package.json"
    )
  end

  desc 'Generate screenshots for app store'
  lane :generate_screenshots do
    capture_screenshots(
      reinstall_app: true,
      clean: true,
      # test_without_building: true,
    )
  end

  desc 'Upload screenshots to app store'
  lane :upload_screenshots do
    deliver(
      force: true,
      skip_screenshots: false,
      skip_metadata: true,
      skip_binary_upload: true,
  )
  end

  desc 'Upload metadata to app store'
  lane :upload_metadata do
    deliver(
      force: true,
      skip_screenshots: false,
      skip_metadata: false,
      skip_binary_upload: true,
  )
  end

  desc 'Update CodePushDeploymentKey'
  lane :update_CodePushDeploymentKey do
    set_info_plist_value(
      key: 'CodePushDeploymentKey',
      value: ENV["CODE_PUSH_DEPLOYMENT_KEY"],
      path: "#{PROJECT_NAME}/Info.plist"
    )
    set_info_plist_value(
      key: 'AppSecret',
      value: ENV["CODE_PUSH_APP_SECRET"],
      path: "AppCenter-Config.plist"
    )
  end

end
